"""Script to visualize learned timestep weights across different models and task types.
Loads results from pickle files generated by learn_timestep_weights.py and creates comparison plots.
"""
import os
import pickle
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict
import json
from datetime import datetime
import pandas as pd

# Base paths for data
RESULTS_DIR = '/mnt/lustre/work/oh/owl661/compositional-vaes/src/vqvae/_post/self_bench/analysis_cfg/processed_runs'
SAVE_DIR = '/mnt/lustre/work/oh/owl661/compositional-vaes/src/vqvae/_post/self_bench/analysis_cfg/analysis_results'

use_positive_weights = True
# List of wandb IDs to analyze
WANDB_IDS = """https://wandb.ai/oshapio/diffusion-itm/runs/zrwirsyp
https://wandb.ai/oshapio/diffusion-itm/runs/bl7fm3pg
https://wandb.ai/oshapio/diffusion-itm/runs/ic2a0sgv
https://wandb.ai/oshapio/diffusion-itm/runs/w6t6nzl5
https://wandb.ai/oshapio/diffusion-itm/runs/4c28wxjf
https://wandb.ai/oshapio/diffusion-itm/runs/n8s9tam6



https://wandb.ai/oshapio/diffusion-itm/runs/iqu5fynu
https://wandb.ai/oshapio/diffusion-itm/runs/zfawifi9
https://wandb.ai/oshapio/diffusion-itm/runs/cqdhg22k
https://wandb.ai/oshapio/diffusion-itm/runs/junv7psv
https://wandb.ai/oshapio/diffusion-itm/runs/zy0ojl6s
https://wandb.ai/oshapio/diffusion-itm/runs/d7txlos7



https://wandb.ai/oshapio/diffusion-itm/runs/y7d8gbo8
https://wandb.ai/oshapio/diffusion-itm/runs/zh96em4j
https://wandb.ai/oshapio/diffusion-itm/runs/ksx9w111
https://wandb.ai/oshapio/diffusion-itm/runs/d1emcf0f
https://wandb.ai/oshapio/diffusion-itm/runs/sdfkhlzp
https://wandb.ai/oshapio/diffusion-itm/runs/9r93c5ju





https://wandb.ai/oshapio/diffusion-itm/runs/uglkshs3
https://wandb.ai/oshapio/diffusion-itm/runs/6nyo6yzk
https://wandb.ai/oshapio/diffusion-itm/runs/ncnnfhv9
https://wandb.ai/oshapio/diffusion-itm/runs/5p92ij8p
https://wandb.ai/oshapio/diffusion-itm/runs/fi1nfmw6
https://wandb.ai/oshapio/diffusion-itm/runs/f2mgeyda



https://wandb.ai/oshapio/diffusion-itm/runs/xk4s53n6
https://wandb.ai/oshapio/diffusion-itm/runs/edc8skul
https://wandb.ai/oshapio/diffusion-itm/runs/cfm8cp1w
https://wandb.ai/oshapio/diffusion-itm/runs/vdcithmx
https://wandb.ai/oshapio/diffusion-itm/runs/mcij8llj
https://wandb.ai/oshapio/diffusion-itm/runs/y52r3i7h



https://wandb.ai/oshapio/diffusion-itm/runs/pbd1r9hj
https://wandb.ai/oshapio/diffusion-itm/runs/n7k1f3up
https://wandb.ai/oshapio/diffusion-itm/runs/3qoxlqg3
https://wandb.ai/oshapio/diffusion-itm/runs/3wi84ft9
https://wandb.ai/oshapio/diffusion-itm/runs/fh8z1zlg
https://wandb.ai/oshapio/diffusion-itm/runs/9l4c64i0



https://wandb.ai/oshapio/diffusion-itm/runs/qrxo4qsd
https://wandb.ai/oshapio/diffusion-itm/runs/9cc86yeo
https://wandb.ai/oshapio/diffusion-itm/runs/d18s64d4
https://wandb.ai/oshapio/diffusion-itm/runs/ffvujtpe
https://wandb.ai/oshapio/diffusion-itm/runs/8p2uh8iv
https://wandb.ai/oshapio/diffusion-itm/runs/4m2n2m22



https://wandb.ai/oshapio/diffusion-itm/runs/6l9h48vb
https://wandb.ai/oshapio/diffusion-itm/runs/3fcj575m
https://wandb.ai/oshapio/diffusion-itm/runs/gpki7ab2
https://wandb.ai/oshapio/diffusion-itm/runs/zujzvqfa
https://wandb.ai/oshapio/diffusion-itm/runs/b55o6dzj
https://wandb.ai/oshapio/diffusion-itm/runs/11vkksd2



https://wandb.ai/oshapio/diffusion-itm/runs/ewc3rcez
https://wandb.ai/oshapio/diffusion-itm/runs/208jqzbt
https://wandb.ai/oshapio/diffusion-itm/runs/i6wobrtj
https://wandb.ai/oshapio/diffusion-itm/runs/nrw8axi7
https://wandb.ai/oshapio/diffusion-itm/runs/gsyk06zt
https://wandb.ai/oshapio/diffusion-itm/runs/v9ihg2wd

https://wandb.ai/oshapio/diffusion-itm/runs/qnd422z0
https://wandb.ai/oshapio/diffusion-itm/runs/3csiyiwj
https://wandb.ai/oshapio/diffusion-itm/runs/2ogb4dsr
https://wandb.ai/oshapio/diffusion-itm/runs/d0f1zktp
https://wandb.ai/oshapio/diffusion-itm/runs/kcv77bsz
https://wandb.ai/oshapio/diffusion-itm/runs/mwjlfx6v
https://wandb.ai/oshapio/diffusion-itm/runs/pyt1r0tk
https://wandb.ai/oshapio/diffusion-itm/runs/opxjon02
https://wandb.ai/oshapio/diffusion-itm/runs/ot61afj9
https://wandb.ai/oshapio/diffusion-itm/runs/rc6ejogc
https://wandb.ai/oshapio/diffusion-itm/runs/b7ugg7ni
https://wandb.ai/oshapio/diffusion-itm/runs/vv8u01mr
https://wandb.ai/oshapio/diffusion-itm/runs/47mw60j7
https://wandb.ai/oshapio/diffusion-itm/runs/pofs27kj
https://wandb.ai/oshapio/diffusion-itm/runs/s7pqiyl1
https://wandb.ai/oshapio/diffusion-itm/runs/ip0drr6k
https://wandb.ai/oshapio/diffusion-itm/runs/u31r9mbb
https://wandb.ai/oshapio/diffusion-itm/runs/j4eryxha
"""  # You'll fill this in with your wandb URLs

# WANDB_IDS = """https://wandb.ai/oshapio/diffusion-itm/runs/xc91lbl4
# https://wandb.ai/oshapio/diffusion-itm/runs/wainv9ia
# https://wandb.ai/oshapio/diffusion-itm/runs/5heqmzaa
# https://wandb.ai/oshapio/diffusion-itm/runs/rby9c34l
# https://wandb.ai/oshapio/diffusion-itm/runs/jw0n5mh3
# https://wandb.ai/oshapio/diffusion-itm/runs/i1oceqe0
# https://wandb.ai/oshapio/diffusion-itm/runs/rolhpq66
# https://wandb.ai/oshapio/diffusion-itm/runs/3eswfles
# https://wandb.ai/oshapio/diffusion-itm/runs/40k279yr
# https://wandb.ai/oshapio/diffusion-itm/runs/6e6yjkdb
# https://wandb.ai/oshapio/diffusion-itm/runs/5u46ok76
# https://wandb.ai/oshapio/diffusion-itm/runs/5yr1cswj
# https://wandb.ai/oshapio/diffusion-itm/runs/a2l2tzh9
# https://wandb.ai/oshapio/diffusion-itm/runs/i5vhvr5d
# https://wandb.ai/oshapio/diffusion-itm/runs/65ej1cc1
# https://wandb.ai/oshapio/diffusion-itm/runs/g8nx1mr8
# https://wandb.ai/oshapio/diffusion-itm/runs/wmjragri
# https://wandb.ai/oshapio/diffusion-itm/runs/wopg1rql
# https://wandb.ai/oshapio/diffusion-itm/runs/so8t2hzg
# https://wandb.ai/oshapio/diffusion-itm/runs/iz4or0ni
# https://wandb.ai/oshapio/diffusion-itm/runs/m3e0zl2y
# https://wandb.ai/oshapio/diffusion-itm/runs/b90gcpfh
# https://wandb.ai/oshapio/diffusion-itm/runs/szzhl92b
# https://wandb.ai/oshapio/diffusion-itm/runs/tol806zv
# https://wandb.ai/oshapio/diffusion-itm/runs/h6xep1mr
# https://wandb.ai/oshapio/diffusion-itm/runs/riplahgz
# https://wandb.ai/oshapio/diffusion-itm/runs/ulc10gu3
# https://wandb.ai/oshapio/diffusion-itm/runs/6xktwzdj
# https://wandb.ai/oshapio/diffusion-itm/runs/jyam2r7g
# https://wandb.ai/oshapio/diffusion-itm/runs/0m2ku1m1
# https://wandb.ai/oshapio/diffusion-itm/runs/02z5dvjr
# https://wandb.ai/oshapio/diffusion-itm/runs/g7l80p48
# https://wandb.ai/oshapio/diffusion-itm/runs/ioue7vpe
# https://wandb.ai/oshapio/diffusion-itm/runs/1ivvzc2y
# https://wandb.ai/oshapio/diffusion-itm/runs/dlpn7278
# https://wandb.ai/oshapio/diffusion-itm/runs/5d27oyfv
# https://wandb.ai/oshapio/diffusion-itm/runs/xobikc0u
# https://wandb.ai/oshapio/diffusion-itm/runs/d1gribr8
# https://wandb.ai/oshapio/diffusion-itm/runs/072kjyl4
# https://wandb.ai/oshapio/diffusion-itm/runs/1dm0485w
# https://wandb.ai/oshapio/diffusion-itm/runs/qzbxlhph
# https://wandb.ai/oshapio/diffusion-itm/runs/3dmdmfp3
# https://wandb.ai/oshapio/diffusion-itm/runs/yuuzn8y7
# https://wandb.ai/oshapio/diffusion-itm/runs/zdn5iq84
# https://wandb.ai/oshapio/diffusion-itm/runs/3d8eofvi
# https://wandb.ai/oshapio/diffusion-itm/runs/rm5rl56r
# https://wandb.ai/oshapio/diffusion-itm/runs/yn99jezw
# https://wandb.ai/oshapio/diffusion-itm/runs/l0l63dyi
# https://wandb.ai/oshapio/diffusion-itm/runs/eicw0k09
# https://wandb.ai/oshapio/diffusion-itm/runs/tue23drr
# https://wandb.ai/oshapio/diffusion-itm/runs/fk0s3k51
# https://wandb.ai/oshapio/diffusion-itm/runs/vce16x8i
# """


WANDB_IDS="""https://wandb.ai/oshapio/diffusion-itm/runs/m1v2cnll
https://wandb.ai/oshapio/diffusion-itm/runs/m4qcjgm5
https://wandb.ai/oshapio/diffusion-itm/runs/nbrbjnxw
https://wandb.ai/oshapio/diffusion-itm/runs/mgl9voym
https://wandb.ai/oshapio/diffusion-itm/runs/otoqg6eh
https://wandb.ai/oshapio/diffusion-itm/runs/87dmdfzl
https://wandb.ai/oshapio/diffusion-itm/runs/9wi1lzei
https://wandb.ai/oshapio/diffusion-itm/runs/863d9je9
https://wandb.ai/oshapio/diffusion-itm/runs/w7360wy5
https://wandb.ai/oshapio/diffusion-itm/runs/kxresj92
https://wandb.ai/oshapio/diffusion-itm/runs/r58jnajo
https://wandb.ai/oshapio/diffusion-itm/runs/77su37pv
https://wandb.ai/oshapio/diffusion-itm/runs/swvtozjy
https://wandb.ai/oshapio/diffusion-itm/runs/d73x7jb1
https://wandb.ai/oshapio/diffusion-itm/runs/cir94yz8
https://wandb.ai/oshapio/diffusion-itm/runs/96fcdpyb
https://wandb.ai/oshapio/diffusion-itm/runs/9u6yjllh
https://wandb.ai/oshapio/diffusion-itm/runs/y8520siq


https://wandb.ai/oshapio/diffusion-itm/runs/gywr9f5t
https://wandb.ai/oshapio/diffusion-itm/runs/c2nb6n36
https://wandb.ai/oshapio/diffusion-itm/runs/3d0aoji7
https://wandb.ai/oshapio/diffusion-itm/runs/eo2xm2vu
https://wandb.ai/oshapio/diffusion-itm/runs/80ukmn5p
https://wandb.ai/oshapio/diffusion-itm/runs/793ped8o
https://wandb.ai/oshapio/diffusion-itm/runs/7mjap2dz
https://wandb.ai/oshapio/diffusion-itm/runs/nbbp9qyb
https://wandb.ai/oshapio/diffusion-itm/runs/80zvk21h
https://wandb.ai/oshapio/diffusion-itm/runs/nfw7wwbo
https://wandb.ai/oshapio/diffusion-itm/runs/qfj7rd8s
https://wandb.ai/oshapio/diffusion-itm/runs/2ui9p0oc
https://wandb.ai/oshapio/diffusion-itm/runs/6zi3p1ni
https://wandb.ai/oshapio/diffusion-itm/runs/4ortneqk
https://wandb.ai/oshapio/diffusion-itm/runs/4hgmbexa
https://wandb.ai/oshapio/diffusion-itm/runs/1dschvt7
https://wandb.ai/oshapio/diffusion-itm/runs/ljvvxpei
https://wandb.ai/oshapio/diffusion-itm/runs/y1njmuvy

https://wandb.ai/oshapio/diffusion-itm/runs/bn25bozv
https://wandb.ai/oshapio/diffusion-itm/runs/3piu8pvm
https://wandb.ai/oshapio/diffusion-itm/runs/skxaxu1c

https://wandb.ai/oshapio/diffusion-itm/runs/sa6pc26d
https://wandb.ai/oshapio/diffusion-itm/runs/f3bqvor9
https://wandb.ai/oshapio/diffusion-itm/runs/y0pacgcx
https://wandb.ai/oshapio/diffusion-itm/runs/dze6bbim
https://wandb.ai/oshapio/diffusion-itm/runs/nnuoqiuj
https://wandb.ai/oshapio/diffusion-itm/runs/ven7ou4j
https://wandb.ai/oshapio/diffusion-itm/runs/ynsb4f42
https://wandb.ai/oshapio/diffusion-itm/runs/619dn4kn
https://wandb.ai/oshapio/diffusion-itm/runs/jo0tn9wp
https://wandb.ai/oshapio/diffusion-itm/runs/pnqajlp9
https://wandb.ai/oshapio/diffusion-itm/runs/jgz8u3nl
https://wandb.ai/oshapio/diffusion-itm/runs/n66xykbp
https://wandb.ai/oshapio/diffusion-itm/runs/388seaad
"""


# # non consistent weights maybe 
WANDB_IDS="""https://wandb.ai/oshapio/diffusion-itm/runs/qnd422z0
https://wandb.ai/oshapio/diffusion-itm/runs/3csiyiwj
https://wandb.ai/oshapio/diffusion-itm/runs/2ogb4dsr
https://wandb.ai/oshapio/diffusion-itm/runs/d0f1zktp
https://wandb.ai/oshapio/diffusion-itm/runs/kcv77bsz
https://wandb.ai/oshapio/diffusion-itm/runs/mwjlfx6v
https://wandb.ai/oshapio/diffusion-itm/runs/pyt1r0tk
https://wandb.ai/oshapio/diffusion-itm/runs/opxjon02
https://wandb.ai/oshapio/diffusion-itm/runs/ot61afj9
https://wandb.ai/oshapio/diffusion-itm/runs/rc6ejogc
https://wandb.ai/oshapio/diffusion-itm/runs/b7ugg7ni
https://wandb.ai/oshapio/diffusion-itm/runs/vv8u01mr
https://wandb.ai/oshapio/diffusion-itm/runs/47mw60j7
https://wandb.ai/oshapio/diffusion-itm/runs/pofs27kj
https://wandb.ai/oshapio/diffusion-itm/runs/s7pqiyl1
https://wandb.ai/oshapio/diffusion-itm/runs/ip0drr6k
https://wandb.ai/oshapio/diffusion-itm/runs/u31r9mbb
https://wandb.ai/oshapio/diffusion-itm/runs/j4eryxha


https://wandb.ai/oshapio/diffusion-itm/runs/zrwirsyp
https://wandb.ai/oshapio/diffusion-itm/runs/bl7fm3pg
https://wandb.ai/oshapio/diffusion-itm/runs/ic2a0sgv
https://wandb.ai/oshapio/diffusion-itm/runs/w6t6nzl5
https://wandb.ai/oshapio/diffusion-itm/runs/4c28wxjf
https://wandb.ai/oshapio/diffusion-itm/runs/n8s9tam6



https://wandb.ai/oshapio/diffusion-itm/runs/iqu5fynu
https://wandb.ai/oshapio/diffusion-itm/runs/zfawifi9
https://wandb.ai/oshapio/diffusion-itm/runs/cqdhg22k
https://wandb.ai/oshapio/diffusion-itm/runs/junv7psv
https://wandb.ai/oshapio/diffusion-itm/runs/zy0ojl6s
https://wandb.ai/oshapio/diffusion-itm/runs/d7txlos7



https://wandb.ai/oshapio/diffusion-itm/runs/y7d8gbo8
https://wandb.ai/oshapio/diffusion-itm/runs/zh96em4j
https://wandb.ai/oshapio/diffusion-itm/runs/ksx9w111
https://wandb.ai/oshapio/diffusion-itm/runs/d1emcf0f
https://wandb.ai/oshapio/diffusion-itm/runs/sdfkhlzp
https://wandb.ai/oshapio/diffusion-itm/runs/9r93c5ju





https://wandb.ai/oshapio/diffusion-itm/runs/uglkshs3
https://wandb.ai/oshapio/diffusion-itm/runs/6nyo6yzk
https://wandb.ai/oshapio/diffusion-itm/runs/ncnnfhv9
https://wandb.ai/oshapio/diffusion-itm/runs/5p92ij8p
https://wandb.ai/oshapio/diffusion-itm/runs/fi1nfmw6
https://wandb.ai/oshapio/diffusion-itm/runs/f2mgeyda



https://wandb.ai/oshapio/diffusion-itm/runs/xk4s53n6
https://wandb.ai/oshapio/diffusion-itm/runs/edc8skul
https://wandb.ai/oshapio/diffusion-itm/runs/cfm8cp1w
https://wandb.ai/oshapio/diffusion-itm/runs/vdcithmx
https://wandb.ai/oshapio/diffusion-itm/runs/mcij8llj
https://wandb.ai/oshapio/diffusion-itm/runs/y52r3i7h



https://wandb.ai/oshapio/diffusion-itm/runs/pbd1r9hj
https://wandb.ai/oshapio/diffusion-itm/runs/n7k1f3up
https://wandb.ai/oshapio/diffusion-itm/runs/3qoxlqg3
https://wandb.ai/oshapio/diffusion-itm/runs/3wi84ft9
https://wandb.ai/oshapio/diffusion-itm/runs/fh8z1zlg
https://wandb.ai/oshapio/diffusion-itm/runs/9l4c64i0



https://wandb.ai/oshapio/diffusion-itm/runs/qrxo4qsd
https://wandb.ai/oshapio/diffusion-itm/runs/9cc86yeo
https://wandb.ai/oshapio/diffusion-itm/runs/d18s64d4
https://wandb.ai/oshapio/diffusion-itm/runs/ffvujtpe
https://wandb.ai/oshapio/diffusion-itm/runs/8p2uh8iv
https://wandb.ai/oshapio/diffusion-itm/runs/4m2n2m22



https://wandb.ai/oshapio/diffusion-itm/runs/6l9h48vb
https://wandb.ai/oshapio/diffusion-itm/runs/3fcj575m
https://wandb.ai/oshapio/diffusion-itm/runs/gpki7ab2
https://wandb.ai/oshapio/diffusion-itm/runs/zujzvqfa
https://wandb.ai/oshapio/diffusion-itm/runs/b55o6dzj
https://wandb.ai/oshapio/diffusion-itm/runs/11vkksd2



https://wandb.ai/oshapio/diffusion-itm/runs/ewc3rcez
https://wandb.ai/oshapio/diffusion-itm/runs/208jqzbt
https://wandb.ai/oshapio/diffusion-itm/runs/i6wobrtj
https://wandb.ai/oshapio/diffusion-itm/runs/nrw8axi7
https://wandb.ai/oshapio/diffusion-itm/runs/gsyk06zt
https://wandb.ai/oshapio/diffusion-itm/runs/v9ihg2wd"""


# WANDB_IDS="""https://wandb.ai/oshapio/diffusion-itm/runs/ofwsx6zd
# https://wandb.ai/oshapio/diffusion-itm/runs/6t4atbib
# https://wandb.ai/oshapio/diffusion-itm/runs/jrz5p15u
# https://wandb.ai/oshapio/diffusion-itm/runs/6gofdtlz
# https://wandb.ai/oshapio/diffusion-itm/runs/68m96r8z
# https://wandb.ai/oshapio/diffusion-itm/runs/3g3ws6j6
# https://wandb.ai/oshapio/diffusion-itm/runs/jyr6brez
# https://wandb.ai/oshapio/diffusion-itm/runs/3s034efn
# https://wandb.ai/oshapio/diffusion-itm/runs/cskbs3pq
# https://wandb.ai/oshapio/diffusion-itm/runs/6uxl07ew
# https://wandb.ai/oshapio/diffusion-itm/runs/97hzwilj
# https://wandb.ai/oshapio/diffusion-itm/runs/7zy46qut
# https://wandb.ai/oshapio/diffusion-itm/runs/mrfrznat
# https://wandb.ai/oshapio/diffusion-itm/runs/gwbwssxl
# https://wandb.ai/oshapio/diffusion-itm/runs/i90d9ajg
# https://wandb.ai/oshapio/diffusion-itm/runs/hcshr7y7
# https://wandb.ai/oshapio/diffusion-itm/runs/h7fka3ir
# https://wandb.ai/oshapio/diffusion-itm/runs/u8quqwks"""


WANDB_IDS="""
https://wandb.ai/oshapio/diffusion-itm/runs/m1v2cnll
https://wandb.ai/oshapio/diffusion-itm/runs/m4qcjgm5
https://wandb.ai/oshapio/diffusion-itm/runs/nbrbjnxw
https://wandb.ai/oshapio/diffusion-itm/runs/mgl9voym
https://wandb.ai/oshapio/diffusion-itm/runs/otoqg6eh
https://wandb.ai/oshapio/diffusion-itm/runs/87dmdfzl
https://wandb.ai/oshapio/diffusion-itm/runs/9wi1lzei
https://wandb.ai/oshapio/diffusion-itm/runs/863d9je9
https://wandb.ai/oshapio/diffusion-itm/runs/w7360wy5
https://wandb.ai/oshapio/diffusion-itm/runs/kxresj92
https://wandb.ai/oshapio/diffusion-itm/runs/r58jnajo
https://wandb.ai/oshapio/diffusion-itm/runs/77su37pv
https://wandb.ai/oshapio/diffusion-itm/runs/swvtozjy
https://wandb.ai/oshapio/diffusion-itm/runs/d73x7jb1
https://wandb.ai/oshapio/diffusion-itm/runs/cir94yz8
https://wandb.ai/oshapio/diffusion-itm/runs/96fcdpyb
https://wandb.ai/oshapio/diffusion-itm/runs/9u6yjllh
https://wandb.ai/oshapio/diffusion-itm/runs/y8520siq


https://wandb.ai/oshapio/diffusion-itm/runs/gywr9f5t
https://wandb.ai/oshapio/diffusion-itm/runs/c2nb6n36
https://wandb.ai/oshapio/diffusion-itm/runs/3d0aoji7
https://wandb.ai/oshapio/diffusion-itm/runs/eo2xm2vu
https://wandb.ai/oshapio/diffusion-itm/runs/80ukmn5p
https://wandb.ai/oshapio/diffusion-itm/runs/793ped8o
https://wandb.ai/oshapio/diffusion-itm/runs/7mjap2dz
https://wandb.ai/oshapio/diffusion-itm/runs/nbbp9qyb
https://wandb.ai/oshapio/diffusion-itm/runs/80zvk21h
https://wandb.ai/oshapio/diffusion-itm/runs/nfw7wwbo
https://wandb.ai/oshapio/diffusion-itm/runs/qfj7rd8s
https://wandb.ai/oshapio/diffusion-itm/runs/2ui9p0oc
https://wandb.ai/oshapio/diffusion-itm/runs/6zi3p1ni
https://wandb.ai/oshapio/diffusion-itm/runs/4ortneqk
https://wandb.ai/oshapio/diffusion-itm/runs/4hgmbexa
https://wandb.ai/oshapio/diffusion-itm/runs/1dschvt7
https://wandb.ai/oshapio/diffusion-itm/runs/ljvvxpei
https://wandb.ai/oshapio/diffusion-itm/runs/y1njmuvy

https://wandb.ai/oshapio/diffusion-itm/runs/bn25bozv
https://wandb.ai/oshapio/diffusion-itm/runs/3piu8pvm
https://wandb.ai/oshapio/diffusion-itm/runs/skxaxu1c

https://wandb.ai/oshapio/diffusion-itm/runs/sa6pc26d
https://wandb.ai/oshapio/diffusion-itm/runs/f3bqvor9
https://wandb.ai/oshapio/diffusion-itm/runs/y0pacgcx
https://wandb.ai/oshapio/diffusion-itm/runs/dze6bbim
https://wandb.ai/oshapio/diffusion-itm/runs/nnuoqiuj
https://wandb.ai/oshapio/diffusion-itm/runs/ven7ou4j
https://wandb.ai/oshapio/diffusion-itm/runs/ynsb4f42
https://wandb.ai/oshapio/diffusion-itm/runs/619dn4kn
https://wandb.ai/oshapio/diffusion-itm/runs/jo0tn9wp
https://wandb.ai/oshapio/diffusion-itm/runs/pnqajlp9
https://wandb.ai/oshapio/diffusion-itm/runs/jgz8u3nl
https://wandb.ai/oshapio/diffusion-itm/runs/n66xykbp
https://wandb.ai/oshapio/diffusion-itm/runs/388seaad
"""

WANDB_IDS="""
https://wandb.ai/oshapio/diffusion-itm/runs/xyor3s78
https://wandb.ai/oshapio/diffusion-itm/runs/g2t64m4b
https://wandb.ai/oshapio/diffusion-itm/runs/rf5u3pz9
https://wandb.ai/oshapio/diffusion-itm/runs/ehu9hwsm
https://wandb.ai/oshapio/diffusion-itm/runs/wl5lzo7g
https://wandb.ai/oshapio/diffusion-itm/runs/pjyhjvyw
https://wandb.ai/oshapio/diffusion-itm/runs/3me8aw5a
https://wandb.ai/oshapio/diffusion-itm/runs/8u8kggz6
https://wandb.ai/oshapio/diffusion-itm/runs/gscuzr4s
https://wandb.ai/oshapio/diffusion-itm/runs/v36p7z3p
https://wandb.ai/oshapio/diffusion-itm/runs/jyo8eg54
https://wandb.ai/oshapio/diffusion-itm/runs/s22r1a97
https://wandb.ai/oshapio/diffusion-itm/runs/jv4v47nh
https://wandb.ai/oshapio/diffusion-itm/runs/n2i85yqa
https://wandb.ai/oshapio/diffusion-itm/runs/wx8dq6oy
https://wandb.ai/oshapio/diffusion-itm/runs/j3eg8g9x
https://wandb.ai/oshapio/diffusion-itm/runs/ob59de44
https://wandb.ai/oshapio/diffusion-itm/runs/etqf6m4e


https://wandb.ai/oshapio/diffusion-itm/runs/8tycjzsk
https://wandb.ai/oshapio/diffusion-itm/runs/d412sq1e
https://wandb.ai/oshapio/diffusion-itm/runs/sf9kid5y
https://wandb.ai/oshapio/diffusion-itm/runs/soxeplhf
https://wandb.ai/oshapio/diffusion-itm/runs/x23d680g
https://wandb.ai/oshapio/diffusion-itm/runs/zmisjw25
https://wandb.ai/oshapio/diffusion-itm/runs/fv45iu8p
https://wandb.ai/oshapio/diffusion-itm/runs/7t5nkhye
https://wandb.ai/oshapio/diffusion-itm/runs/eyec6klt
https://wandb.ai/oshapio/diffusion-itm/runs/isqssxoj
https://wandb.ai/oshapio/diffusion-itm/runs/66gmrhfk
https://wandb.ai/oshapio/diffusion-itm/runs/bnwcee1n
https://wandb.ai/oshapio/diffusion-itm/runs/nhgrhxun
https://wandb.ai/oshapio/diffusion-itm/runs/wbcbs7pq
https://wandb.ai/oshapio/diffusion-itm/runs/79mc4oyu
https://wandb.ai/oshapio/diffusion-itm/runs/uqb4zfgi
https://wandb.ai/oshapio/diffusion-itm/runs/657sgp6m
https://wandb.ai/oshapio/diffusion-itm/runs/tfloq2zf

https://wandb.ai/oshapio/diffusion-itm/runs/qjua145a
https://wandb.ai/oshapio/diffusion-itm/runs/mblsor9q
https://wandb.ai/oshapio/diffusion-itm/runs/mst9bl9p
https://wandb.ai/oshapio/diffusion-itm/runs/o64mx922
https://wandb.ai/oshapio/diffusion-itm/runs/bgqulovl
https://wandb.ai/oshapio/diffusion-itm/runs/01dpmapt
https://wandb.ai/oshapio/diffusion-itm/runs/8cv1l6b6
https://wandb.ai/oshapio/diffusion-itm/runs/mzh8xdwb
https://wandb.ai/oshapio/diffusion-itm/runs/cubzl0b1
https://wandb.ai/oshapio/diffusion-itm/runs/0jxh3iip
https://wandb.ai/oshapio/diffusion-itm/runs/dvxgc18d
https://wandb.ai/oshapio/diffusion-itm/runs/ioer1zo7
https://wandb.ai/oshapio/diffusion-itm/runs/gyjx40np
https://wandb.ai/oshapio/diffusion-itm/runs/8agkpum3
https://wandb.ai/oshapio/diffusion-itm/runs/c6aic93a
https://wandb.ai/oshapio/diffusion-itm/runs/w1lkbwai
https://wandb.ai/oshapio/diffusion-itm/runs/z4orvjw7
https://wandb.ai/oshapio/diffusion-itm/runs/0c3mzvql

# reinit noise False

https://wandb.ai/oshapio/diffusion-itm/runs/uh5ys1fa
https://wandb.ai/oshapio/diffusion-itm/runs/c7umomoa
https://wandb.ai/oshapio/diffusion-itm/runs/51l48hhx
https://wandb.ai/oshapio/diffusion-itm/runs/mphzi52g
https://wandb.ai/oshapio/diffusion-itm/runs/bo7fod1d
https://wandb.ai/oshapio/diffusion-itm/runs/epzbqo8s
https://wandb.ai/oshapio/diffusion-itm/runs/3so2q9td
https://wandb.ai/oshapio/diffusion-itm/runs/8o8676x2
https://wandb.ai/oshapio/diffusion-itm/runs/dssrf0lv
https://wandb.ai/oshapio/diffusion-itm/runs/17gnnx2t
https://wandb.ai/oshapio/diffusion-itm/runs/lorqwa6j
https://wandb.ai/oshapio/diffusion-itm/runs/5lodb0na
https://wandb.ai/oshapio/diffusion-itm/runs/2wvv7vz1
https://wandb.ai/oshapio/diffusion-itm/runs/h9pah8c4
https://wandb.ai/oshapio/diffusion-itm/runs/1du0iqq4
https://wandb.ai/oshapio/diffusion-itm/runs/nhqx1d6d
https://wandb.ai/oshapio/diffusion-itm/runs/aw18g199
https://wandb.ai/oshapio/diffusion-itm/runs/qczjjb1f

https://wandb.ai/oshapio/diffusion-itm/runs/ofwsx6zd
https://wandb.ai/oshapio/diffusion-itm/runs/6t4atbib
https://wandb.ai/oshapio/diffusion-itm/runs/jrz5p15u
https://wandb.ai/oshapio/diffusion-itm/runs/6gofdtlz
https://wandb.ai/oshapio/diffusion-itm/runs/68m96r8z
https://wandb.ai/oshapio/diffusion-itm/runs/3g3ws6j6
https://wandb.ai/oshapio/diffusion-itm/runs/jyr6brez
https://wandb.ai/oshapio/diffusion-itm/runs/3s034efn
https://wandb.ai/oshapio/diffusion-itm/runs/cskbs3pq
https://wandb.ai/oshapio/diffusion-itm/runs/6uxl07ew
https://wandb.ai/oshapio/diffusion-itm/runs/97hzwilj
https://wandb.ai/oshapio/diffusion-itm/runs/7zy46qut
https://wandb.ai/oshapio/diffusion-itm/runs/mrfrznat
https://wandb.ai/oshapio/diffusion-itm/runs/gwbwssxl
https://wandb.ai/oshapio/diffusion-itm/runs/i90d9ajg
https://wandb.ai/oshapio/diffusion-itm/runs/hcshr7y7
https://wandb.ai/oshapio/diffusion-itm/runs/h7fka3ir
https://wandb.ai/oshapio/diffusion-itm/runs/u8quqwks

/cmu53ozj
https://wandb.ai/oshapio/diffusion-itm/runs/5q2lvihj
/9ypoy5xx
https://wandb.ai/oshapio/diffusion-itm/runs/zmwvhcev
/c216ry2h
https://wandb.ai/oshapio/diffusion-itm/runs/avz9mukc
https://wandb.ai/oshapio/diffusion-itm/runs/7xqde6gc
https://wandb.ai/oshapio/diffusion-itm/runs/sfjezo9z
https://wandb.ai/oshapio/diffusion-itm/runs/48diyvdi
/foyb933e
/0yrqhliq
https://wandb.ai/oshapio/diffusion-itm/runs/ntrf88o6
https://wandb.ai/oshapio/diffusion-itm/runs/sr11r7jl
/c33tj7br
/9f8j58hv
/gpbagqfw
/01bgtjha
https://wandb.ai/oshapio/diffusion-itm/runs/83fo6d9r

https://wandb.ai/oshapio/diffusion-itm/runs/m1v2cnll
https://wandb.ai/oshapio/diffusion-itm/runs/m4qcjgm5
https://wandb.ai/oshapio/diffusion-itm/runs/nbrbjnxw
https://wandb.ai/oshapio/diffusion-itm/runs/mgl9voym
https://wandb.ai/oshapio/diffusion-itm/runs/otoqg6eh
https://wandb.ai/oshapio/diffusion-itm/runs/87dmdfzl
https://wandb.ai/oshapio/diffusion-itm/runs/9wi1lzei
https://wandb.ai/oshapio/diffusion-itm/runs/863d9je9
https://wandb.ai/oshapio/diffusion-itm/runs/w7360wy5
https://wandb.ai/oshapio/diffusion-itm/runs/kxresj92
https://wandb.ai/oshapio/diffusion-itm/runs/r58jnajo
https://wandb.ai/oshapio/diffusion-itm/runs/77su37pv
https://wandb.ai/oshapio/diffusion-itm/runs/swvtozjy
https://wandb.ai/oshapio/diffusion-itm/runs/d73x7jb1
https://wandb.ai/oshapio/diffusion-itm/runs/cir94yz8
https://wandb.ai/oshapio/diffusion-itm/runs/96fcdpyb
https://wandb.ai/oshapio/diffusion-itm/runs/9u6yjllh
https://wandb.ai/oshapio/diffusion-itm/runs/y8520siq


https://wandb.ai/oshapio/diffusion-itm/runs/gywr9f5t
https://wandb.ai/oshapio/diffusion-itm/runs/c2nb6n36
https://wandb.ai/oshapio/diffusion-itm/runs/3d0aoji7
https://wandb.ai/oshapio/diffusion-itm/runs/eo2xm2vu
https://wandb.ai/oshapio/diffusion-itm/runs/80ukmn5p
https://wandb.ai/oshapio/diffusion-itm/runs/793ped8o
https://wandb.ai/oshapio/diffusion-itm/runs/7mjap2dz
https://wandb.ai/oshapio/diffusion-itm/runs/nbbp9qyb
https://wandb.ai/oshapio/diffusion-itm/runs/80zvk21h
https://wandb.ai/oshapio/diffusion-itm/runs/nfw7wwbo
https://wandb.ai/oshapio/diffusion-itm/runs/qfj7rd8s
https://wandb.ai/oshapio/diffusion-itm/runs/2ui9p0oc
https://wandb.ai/oshapio/diffusion-itm/runs/6zi3p1ni
https://wandb.ai/oshapio/diffusion-itm/runs/4ortneqk
https://wandb.ai/oshapio/diffusion-itm/runs/4hgmbexa
https://wandb.ai/oshapio/diffusion-itm/runs/1dschvt7
https://wandb.ai/oshapio/diffusion-itm/runs/ljvvxpei
https://wandb.ai/oshapio/diffusion-itm/runs/y1njmuvy

https://wandb.ai/oshapio/diffusion-itm/runs/bn25bozv
https://wandb.ai/oshapio/diffusion-itm/runs/3piu8pvm
https://wandb.ai/oshapio/diffusion-itm/runs/skxaxu1c
https://wandb.ai/oshapio/diffusion-itm/runs/8vfhg1fc
https://wandb.ai/oshapio/diffusion-itm/runs/sa6pc26d
https://wandb.ai/oshapio/diffusion-itm/runs/f3bqvor9
https://wandb.ai/oshapio/diffusion-itm/runs/y0pacgcx
https://wandb.ai/oshapio/diffusion-itm/runs/dze6bbim
https://wandb.ai/oshapio/diffusion-itm/runs/nnuoqiuj
https://wandb.ai/oshapio/diffusion-itm/runs/ven7ou4j
https://wandb.ai/oshapio/diffusion-itm/runs/ynsb4f42
https://wandb.ai/oshapio/diffusion-itm/runs/619dn4kn
https://wandb.ai/oshapio/diffusion-itm/runs/jo0tn9wp
https://wandb.ai/oshapio/diffusion-itm/runs/pnqajlp9
https://wandb.ai/oshapio/diffusion-itm/runs/jgz8u3nl
https://wandb.ai/oshapio/diffusion-itm/runs/n66xykbp
https://wandb.ai/oshapio/diffusion-itm/runs/388seaad
https://wandb.ai/oshapio/diffusion-itm/runs/8nblrv3h
"""


# no re-init noises
WANDB_IDS = """
https://wandb.ai/oshapio/diffusion-itm/runs/zrwirsyp
https://wandb.ai/oshapio/diffusion-itm/runs/bl7fm3pg
https://wandb.ai/oshapio/diffusion-itm/runs/ic2a0sgv
https://wandb.ai/oshapio/diffusion-itm/runs/w6t6nzl5
https://wandb.ai/oshapio/diffusion-itm/runs/4c28wxjf
https://wandb.ai/oshapio/diffusion-itm/runs/n8s9tam6



https://wandb.ai/oshapio/diffusion-itm/runs/iqu5fynu
https://wandb.ai/oshapio/diffusion-itm/runs/zfawifi9
https://wandb.ai/oshapio/diffusion-itm/runs/cqdhg22k
https://wandb.ai/oshapio/diffusion-itm/runs/junv7psv
https://wandb.ai/oshapio/diffusion-itm/runs/zy0ojl6s
https://wandb.ai/oshapio/diffusion-itm/runs/d7txlos7



https://wandb.ai/oshapio/diffusion-itm/runs/y7d8gbo8
https://wandb.ai/oshapio/diffusion-itm/runs/zh96em4j
https://wandb.ai/oshapio/diffusion-itm/runs/ksx9w111
https://wandb.ai/oshapio/diffusion-itm/runs/d1emcf0f
https://wandb.ai/oshapio/diffusion-itm/runs/sdfkhlzp
https://wandb.ai/oshapio/diffusion-itm/runs/9r93c5ju





https://wandb.ai/oshapio/diffusion-itm/runs/uglkshs3
https://wandb.ai/oshapio/diffusion-itm/runs/6nyo6yzk
https://wandb.ai/oshapio/diffusion-itm/runs/ncnnfhv9
https://wandb.ai/oshapio/diffusion-itm/runs/5p92ij8p
https://wandb.ai/oshapio/diffusion-itm/runs/fi1nfmw6
https://wandb.ai/oshapio/diffusion-itm/runs/f2mgeyda



https://wandb.ai/oshapio/diffusion-itm/runs/xk4s53n6
https://wandb.ai/oshapio/diffusion-itm/runs/edc8skul
https://wandb.ai/oshapio/diffusion-itm/runs/cfm8cp1w
https://wandb.ai/oshapio/diffusion-itm/runs/vdcithmx
https://wandb.ai/oshapio/diffusion-itm/runs/mcij8llj
https://wandb.ai/oshapio/diffusion-itm/runs/y52r3i7h



https://wandb.ai/oshapio/diffusion-itm/runs/pbd1r9hj
https://wandb.ai/oshapio/diffusion-itm/runs/n7k1f3up
https://wandb.ai/oshapio/diffusion-itm/runs/3qoxlqg3
https://wandb.ai/oshapio/diffusion-itm/runs/3wi84ft9
https://wandb.ai/oshapio/diffusion-itm/runs/fh8z1zlg
https://wandb.ai/oshapio/diffusion-itm/runs/9l4c64i0



https://wandb.ai/oshapio/diffusion-itm/runs/qrxo4qsd
https://wandb.ai/oshapio/diffusion-itm/runs/9cc86yeo
https://wandb.ai/oshapio/diffusion-itm/runs/d18s64d4
https://wandb.ai/oshapio/diffusion-itm/runs/ffvujtpe
https://wandb.ai/oshapio/diffusion-itm/runs/8p2uh8iv
https://wandb.ai/oshapio/diffusion-itm/runs/4m2n2m22



https://wandb.ai/oshapio/diffusion-itm/runs/6l9h48vb
https://wandb.ai/oshapio/diffusion-itm/runs/3fcj575m
https://wandb.ai/oshapio/diffusion-itm/runs/gpki7ab2
https://wandb.ai/oshapio/diffusion-itm/runs/zujzvqfa
https://wandb.ai/oshapio/diffusion-itm/runs/b55o6dzj
https://wandb.ai/oshapio/diffusion-itm/runs/11vkksd2



https://wandb.ai/oshapio/diffusion-itm/runs/ewc3rcez
https://wandb.ai/oshapio/diffusion-itm/runs/208jqzbt
https://wandb.ai/oshapio/diffusion-itm/runs/i6wobrtj
https://wandb.ai/oshapio/diffusion-itm/runs/nrw8axi7
https://wandb.ai/oshapio/diffusion-itm/runs/gsyk06zt
https://wandb.ai/oshapio/diffusion-itm/runs/v9ihg2wd








https://wandb.ai/oshapio/diffusion-itm/runs/2s8hx7a9
https://wandb.ai/oshapio/diffusion-itm/runs/xwloppek
https://wandb.ai/oshapio/diffusion-itm/runs/64poin8x
https://wandb.ai/oshapio/diffusion-itm/runs/4d4rntku

https://wandb.ai/oshapio/diffusion-itm/runs/149qi202
https://wandb.ai/oshapio/diffusion-itm/runs/lfdvc7a7
https://wandb.ai/oshapio/diffusion-itm/runs/phmk447p
https://wandb.ai/oshapio/diffusion-itm/runs/ri3k0u17






https://wandb.ai/oshapio/diffusion-itm/runs/qnd422z0
https://wandb.ai/oshapio/diffusion-itm/runs/3csiyiwj
https://wandb.ai/oshapio/diffusion-itm/runs/2ogb4dsr
https://wandb.ai/oshapio/diffusion-itm/runs/d0f1zktp
https://wandb.ai/oshapio/diffusion-itm/runs/kcv77bsz
https://wandb.ai/oshapio/diffusion-itm/runs/mwjlfx6v
https://wandb.ai/oshapio/diffusion-itm/runs/pyt1r0tk
https://wandb.ai/oshapio/diffusion-itm/runs/opxjon02
https://wandb.ai/oshapio/diffusion-itm/runs/ot61afj9
https://wandb.ai/oshapio/diffusion-itm/runs/rc6ejogc
https://wandb.ai/oshapio/diffusion-itm/runs/b7ugg7ni
https://wandb.ai/oshapio/diffusion-itm/runs/vv8u01mr
https://wandb.ai/oshapio/diffusion-itm/runs/47mw60j7
https://wandb.ai/oshapio/diffusion-itm/runs/pofs27kj
https://wandb.ai/oshapio/diffusion-itm/runs/s7pqiyl1
https://wandb.ai/oshapio/diffusion-itm/runs/ip0drr6k
https://wandb.ai/oshapio/diffusion-itm/runs/u31r9mbb
https://wandb.ai/oshapio/diffusion-itm/runs/j4eryxha
https://wandb.ai/oshapio/diffusion-itm/runs/bcctsrt5"""

# other tasks
WANDB_IDS = """
https://wandb.ai/oshapio/diffusion-itm/runs/1gsnsa2o
https://wandb.ai/oshapio/diffusion-itm/runs/dv7mhpzz
https://wandb.ai/oshapio/diffusion-itm/runs/hx60elvb


https://wandb.ai/oshapio/diffusion-itm/runs/gc605ar8
https://wandb.ai/oshapio/diffusion-itm/runs/hwcn73mr
https://wandb.ai/oshapio/diffusion-itm/runs/29q5d2xx



https://wandb.ai/oshapio/diffusion-itm/runs/b7gx30uz
https://wandb.ai/oshapio/diffusion-itm/runs/961j3xwe
https://wandb.ai/oshapio/diffusion-itm/runs/l8g13ki0


https://wandb.ai/oshapio/diffusion-itm/runs/wjuhppfn
https://wandb.ai/oshapio/diffusion-itm/runs/9bw4cnl1
https://wandb.ai/oshapio/diffusion-itm/runs/6g5mut9l



https://wandb.ai/oshapio/diffusion-itm/runs/b4um7r6f
https://wandb.ai/oshapio/diffusion-itm/runs/pluicytc
https://wandb.ai/oshapio/diffusion-itm/runs/uwc7fyhe

https://wandb.ai/oshapio/diffusion-itm/runs/k37mxru1
https://wandb.ai/oshapio/diffusion-itm/runs/9zqho8xf
https://wandb.ai/oshapio/diffusion-itm/runs/7ogbhzcr


https://wandb.ai/oshapio/diffusion-itm/runs/5qs0cajc
https://wandb.ai/oshapio/diffusion-itm/runs/qcsggx25
https://wandb.ai/oshapio/diffusion-itm/runs/2ixwlnhn


https://wandb.ai/oshapio/diffusion-itm/runs/tvq9it9p
https://wandb.ai/oshapio/diffusion-itm/runs/fjzp9aw6
https://wandb.ai/oshapio/diffusion-itm/runs/o5d3z2se


https://wandb.ai/oshapio/diffusion-itm/runs/em6aaazu
https://wandb.ai/oshapio/diffusion-itm/runs/wthwlvaf
https://wandb.ai/oshapio/diffusion-itm/runs/hp2g1663





https://wandb.ai/oshapio/diffusion-itm/runs/vy0kaed9
https://wandb.ai/oshapio/diffusion-itm/runs/vlpu4ohf
https://wandb.ai/oshapio/diffusion-itm/runs/6bmm64m2


https://wandb.ai/oshapio/diffusion-itm/runs/screz7kc
https://wandb.ai/oshapio/diffusion-itm/runs/gxtgq8xy
https://wandb.ai/oshapio/diffusion-itm/runs/41wb1olj



https://wandb.ai/oshapio/diffusion-itm/runs/vig7x23t
https://wandb.ai/oshapio/diffusion-itm/runs/s3ztqxhw
https://wandb.ai/oshapio/diffusion-itm/runs/23qsl093


https://wandb.ai/oshapio/diffusion-itm/runs/q067qlrs
https://wandb.ai/oshapio/diffusion-itm/runs/pi7bq42z
https://wandb.ai/oshapio/diffusion-itm/runs/0lfvzysc



https://wandb.ai/oshapio/diffusion-itm/runs/vx1poyp1
https://wandb.ai/oshapio/diffusion-itm/runs/qru1ckzg
https://wandb.ai/oshapio/diffusion-itm/runs/3zekw8fn

https://wandb.ai/oshapio/diffusion-itm/runs/5erx4y12
https://wandb.ai/oshapio/diffusion-itm/runs/u84yqwo7
https://wandb.ai/oshapio/diffusion-itm/runs/k4woiq6b


https://wandb.ai/oshapio/diffusion-itm/runs/1vm0mbq0
https://wandb.ai/oshapio/diffusion-itm/runs/s9bo9zen
https://wandb.ai/oshapio/diffusion-itm/runs/igvywro9


https://wandb.ai/oshapio/diffusion-itm/runs/au2xmxaj
https://wandb.ai/oshapio/diffusion-itm/runs/yaie1x38
https://wandb.ai/oshapio/diffusion-itm/runs/0uy3ew0t


https://wandb.ai/oshapio/diffusion-itm/runs/cwz050vu
https://wandb.ai/oshapio/diffusion-itm/runs/n5gpqwrk
https://wandb.ai/oshapio/diffusion-itm/runs/dia1lx1m"""

# Parse wandb IDs from URLs by taking last part after /
run_ids = [url.strip().split('/')[-1] for url in WANDB_IDS.strip().split('\n') if url.strip()]

def load_metadata(wandb_id):
    """Load metadata for a specific wandb run.
    
    Args:
        wandb_id (str): The wandb run ID
        
    Returns:
        dict: Metadata for the run or None if not found
    """
    metadata_dir = '/mnt/lustre/work/oh/owl661/compositional-vaes/cached_wandb_metadata'
    all_metadata_path = os.path.join(metadata_dir, "all_runs_metadata.pkl")
    
    try:
        with open(all_metadata_path, 'rb') as f:
            data = pickle.load(f)
            
        # Get the run data
        run_data = data['runs'].get(wandb_id)
        if run_data is None:
            print(f"Warning: No metadata found for {wandb_id}")
            return None
            
        # Extract config and summary
        config = {}
        summary = {}
        if isinstance(run_data, dict):
            if 'config' in run_data:
                raw_config = run_data['config']
                if hasattr(raw_config, 'items'):
                    config = {k: v for k, v in raw_config.items()}
                elif isinstance(raw_config, dict):
                    config = raw_config
            if 'summary' in run_data:
                summary = run_data['summary']
        
        version = config.get('version')
        # For SD 3-m, append resize info to version
        if version == '3-m':
            sd3_resize = config.get('sd3_resize', False)
            version = f"3-m {'(resize)' if sd3_resize else '(no-resize)'}"
            
            # if resize, skip
            if sd3_resize:
                raise ValueError("SD 3-m with resize is not supported")
            
        # check if init config reinit_noise is there
        if 'reinit_noise' in config and config['reinit_noise']:
            version = f"{version} (reinit_noise)"
        
        # Return processed metadata
        return {
            'task': config.get('task'),
            'geneval_version': config.get('geneval_version'),
            'version': version,
            'sd_version': version,  # alias for version
            'model_type': config.get('model_type', version),  # fallback to version if model_type not present
            'use_normed_classifier': config.get('use_normed_classifier', True),
            'accuracy': summary.get('accuracy'),
            'best_accuracy': summary.get('best_accuracy'),
            'final_accuracy': summary.get('final_accuracy'),
            'accuracy_clipped': summary.get('accuracy_clipped'),
            'sampling_steps': config.get('sampling_steps', 1000)
        }
        
    except Exception as e:
        print(f"Error loading metadata for {wandb_id}: {e}")
        return None

def load_all_results(train_ratio=None, use_positive_weights=True, l1_lambda=0.0, poly_degree=None):
    """Preload all results into a dictionary.
    
    Args:
        train_ratio (float, optional): If provided, loads few-shot results for that ratio.
            If None, loads regular results.
    Returns:
        tuple: (results_cache, metadata_cache) dictionaries
    """
    results_cache = {}
    metadata_cache = {}
    
    for run_id in run_ids:
        # Determine which file to load based on train_ratio
        # if train_ratio is not None:
        if train_ratio is None:
            train_ratio = "None"
        # Load specific few-shot results
        results_file = os.path.join(RESULTS_DIR, f'{run_id}_train{train_ratio}_val0.2_results_{use_positive_weights}_l1_{l1_lambda}_{poly_degree}_consistent.pkl')
        # else:
        #     # Load regular results
        #     results_file = os.path.join(RESULTS_DIR, f'{run_id}_results_{use_positive_weights}.pkl')
            
        if not os.path.exists(results_file):
            print(f"Warning: Results file not found for run {run_id}")
            continue
        
        with open(results_file, 'rb') as f:
            results_cache[run_id] = pickle.load(f)
        
        # Load metadata and add train_ratio if using few-shot
        metadata = load_metadata(run_id)
        if metadata:
            if train_ratio is not None:
                metadata['train_ratio'] = train_ratio
            metadata_cache[run_id] = metadata
    
    return results_cache, metadata_cache

# Set up plotting style
import seaborn as sns
sns.reset_defaults()
plt.rcParams['axes.spines.right'] = False
plt.rcParams['axes.spines.top'] = False

# global sizes of font 8
plt.rcParams['font.size'] = 6
plt.rcParams['axes.labelsize'] = 4
plt.rcParams['axes.titlesize'] = 6
plt.rcParams['legend.fontsize'] = 6
plt.rcParams['xtick.labelsize'] = 4
plt.rcParams['ytick.labelsize'] = 2

def save_analysis_results(results_cache, metadata_cache, plot_params, save_dir=SAVE_DIR):
    """Save analysis results in an organized way.
    
    Args:
        results_cache (dict): Dictionary of results by run_id
        metadata_cache (dict): Dictionary of metadata by run_id
        plot_params (dict): Parameters used for plotting
        save_dir (str): Base directory to save results
    """
    # Create timestamp for this analysis run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Create directory structure
    analysis_dir = os.path.join(save_dir, timestamp)
    os.makedirs(analysis_dir, exist_ok=True)
    os.makedirs(os.path.join(analysis_dir, 'raw_data'), exist_ok=True)
    os.makedirs(os.path.join(analysis_dir, 'processed_data'), exist_ok=True)
    os.makedirs(os.path.join(analysis_dir, 'figures'), exist_ok=True)
    
    # Save raw data
    with open(os.path.join(analysis_dir, 'raw_data', 'results_cache.pkl'), 'wb') as f:
        pickle.dump(results_cache, f)
    with open(os.path.join(analysis_dir, 'raw_data', 'metadata_cache.pkl'), 'wb') as f:
        pickle.dump(metadata_cache, f)
        
    # Save plot parameters
    with open(os.path.join(analysis_dir, 'plot_params.json'), 'w') as f:
        json.dump(plot_params, f, indent=2)
        
    # Process and save summary statistics
    summary_stats = compute_summary_statistics(results_cache, metadata_cache)
    with open(os.path.join(analysis_dir, 'processed_data', 'summary_stats.json'), 'w') as f:
        json.dump(summary_stats, f, indent=2)
        
    return analysis_dir

def compute_summary_statistics(results_cache, metadata_cache):
    """Compute summary statistics from the results.
    
    Args:
        results_cache (dict): Dictionary of results by run_id
        metadata_cache (dict): Dictionary of metadata by run_id
    
    Returns:
        dict: Summary statistics
    """
    stats = defaultdict(dict)
    
    # Group results by task and model version
    for run_id, results in results_cache.items():
        if run_id not in metadata_cache:
            continue
            
        metadata = metadata_cache[run_id]
        task = metadata.get('task', 'unknown')
        version = metadata.get('version', 'unknown')
        
        # Get accuracies
        orig_acc = results.get('accuracy_original', 0)
        weighted_acc = results.get('accuracy_best', 0)
        improvement = weighted_acc - orig_acc
        
        # Update stats
        if task not in stats:
            stats[task] = defaultdict(list)
        
        stats[task][version].append({
            'run_id': run_id,
            'original_accuracy': orig_acc,
            'weighted_accuracy': weighted_acc,
            'improvement': improvement,
            'weights': results.get('timestep_weights', []).tolist()
        })
    
    # Compute averages
    summary = {}
    for task, versions in stats.items():
        summary[task] = {}
        for version, runs in versions.items():
            summary[task][version] = {
                'avg_original_accuracy': np.mean([r['original_accuracy'] for r in runs]),
                'avg_weighted_accuracy': np.mean([r['weighted_accuracy'] for r in runs]),
                'avg_improvement': np.mean([r['improvement'] for r in runs]),
                'std_improvement': np.std([r['improvement'] for r in runs]),
                'num_runs': len(runs)
            }
    
    return summary

def save_displayed_data(grouped_runs, results_cache, metadata_cache, plot_params, save_dir='plot_data'):
    """Save only the data that's actually displayed in the plots.
    
    Args:
        grouped_runs (dict): The grouped runs by categories
        results_cache (dict): Full results cache
        metadata_cache (dict): Full metadata cache
        plot_params (dict): Parameters used for plotting
    """
    displayed_data = {
        'plot_params': plot_params,
        'data': defaultdict(dict)
    }
    
    # For each cell in the grid
    for (row_val, col_val), sd_versions in grouped_runs.items():
        key = f"{row_val}_{col_val}"
        displayed_data['data'][key] = {}
        
        # For each SD version in this cell
        for sd_version, runs in sd_versions.items():
            version_data = []
            for run_id in runs:
                if run_id not in results_cache:
                    continue
                    
                results = results_cache[run_id]
                weights = results['timestep_weights']
                accuracy = results['accuracy_best']
                accuracy_orig = results['accuracy_original']
                
                if 'test_accuracy_before' in results:
                    accuracy_orig = results['test_accuracy_before']
                if 'test_accuracy' in results:
                    accuracy = results['test_accuracy']
                
                version_data.append({
                    'weights': weights.tolist(),
                    'accuracy': float(accuracy),
                    'accuracy_orig': float(accuracy_orig)
                })
            
            displayed_data['data'][key][sd_version] = version_data
    
    # Save to a single pickle file
    os.makedirs(save_dir, exist_ok=True)
    params_str = f"_{plot_params['row_key']}_vs_{plot_params['col_key']}_train{plot_params['train_ratio']}"
    save_path = os.path.join(save_dir, f'displayed_data{params_str}.pkl')
    
    with open(save_path, 'wb') as f:
        pickle.dump(displayed_data, f)
    
    print(f"Saved displayed data to: {os.path.abspath(save_path)}")
    return save_path

def save_all_data(results_cache, metadata_cache, plot_params, save_dir='plot_data'):
    """Save all data in a clean DataFrame format.
    
    Args:
        results_cache (dict): Dictionary of results by run_id
        metadata_cache (dict): Dictionary of metadata by run_id
        plot_params (dict): Parameters used for plotting
        save_dir (str): Directory to save the data
    """
    all_data = []
    
    for run_id, results in results_cache.items():
        if run_id not in metadata_cache:
            continue
            
        metadata = metadata_cache[run_id]
        
        # Get accuracies
        accuracy = results.get('accuracy_best', 0)
        accuracy_orig = results.get('accuracy_original', 0)
        if 'test_accuracy_before' in results:
            accuracy_orig = results['test_accuracy_before']
        if 'test_accuracy' in results:
            accuracy = results['test_accuracy']
            
        # Get weights
        weights = results.get('timestep_weights', [])
        weights = weights / np.abs(weights).max()  # Normalize weights
        
        # Create data entry with all information
        data_entry = {
            # Run identification
            'run_id': run_id,
            
            # Plot parameters
            'row_key': plot_params['row_key'],
            'col_key': plot_params['col_key'],
            'train_ratio': plot_params['train_ratio'],
            'use_positive_weights': plot_params['use_positive_weights'],
            'l1_lambda': plot_params['l1_lambda'],
            'poly_degree': plot_params['poly_degree'],
            
            # Metadata
            'task': metadata.get('task'),
            'geneval_version': metadata.get('geneval_version'),
            'version': metadata.get('version'),
            'sd_version': metadata.get('sd_version'),
            'model_type': metadata.get('model_type'),
            'sampling_steps': metadata.get('sampling_steps', 1000),
            
            # Results
            'accuracy': accuracy,
            'accuracy_orig': accuracy_orig,
            'improvement': accuracy - accuracy_orig,
            'weights': weights.tolist(),
            'num_timesteps': len(weights),
            
            # Additional results if available
            'test_accuracy_before': results.get('test_accuracy_before'),
            'test_accuracy': results.get('test_accuracy'),
            'accuracy_best': results.get('accuracy_best'),
            'accuracy_original': results.get('accuracy_original'),
            
            # Raw results for reference
            'raw_results': results
        }
        
        all_data.append(data_entry)
    
    # Convert to DataFrame
    df = pd.DataFrame(all_data)
    
    # Save DataFrame
    os.makedirs(save_dir, exist_ok=True)
    
    # Include train_ratio in filenames
    train_ratio_str = f"_train{plot_params['train_ratio']}"
    save_path = os.path.join(save_dir, f'all_results{train_ratio_str}.csv')
    df.to_csv(save_path, index=False)
    
    # Also save as pickle for faster loading
    pickle_path = os.path.join(save_dir, f'all_results{train_ratio_str}.pkl')
    df.to_pickle(pickle_path)
    
    print(f"Saved data to: {os.path.abspath(save_path)}")
    print(f"Saved pickle to: {os.path.abspath(pickle_path)}")
    
    return df

def create_comparison_plots(results_cache, metadata_cache, row_key='geneval_version', col_key='task', train_ratio=None, use_positive_weights=True, l1_lambda=0.0, poly_degree=None):
    """Create a grid of plots comparing timestep weights and accuracies across categories."""
    # Set up the plot style
    plt.style.use('seaborn-v0_8-paper')
    
    # Define colors for each SD version
    sd_versions = set()
    for run_id, metadata in metadata_cache.items():
        sd_versions.add(str(metadata.get('sd_version', 'N/A')))
    
    sd_versions = sorted(list(sd_versions))
    colors = sns.color_palette("colorblind", n_colors=len(sd_versions))
    sd_version_colors = dict(zip(sd_versions, colors))
    
    # Extract row and column values
    row_values = set()
    col_values = set()
    
    for run_id, metadata in metadata_cache.items():
        row_values.add(str(metadata.get(row_key, 'N/A')))
        col_values.add(str(metadata.get(col_key, 'N/A')))
    
    # Sort values for consistent ordering
    row_values = sorted(list(row_values))
    col_values = sorted(list(col_values))
    
    # Group runs by row, column, and sampling steps
    grouped_runs = defaultdict(lambda: defaultdict(lambda: defaultdict(list)))
    sampling_steps_values = set()
    
    for run_id, metadata in metadata_cache.items():
        row_val = str(metadata.get(row_key, 'N/A'))
        col_val = str(metadata.get(col_key, 'N/A'))
        sd_version = str(metadata.get('sd_version', 'N/A'))
        sampling_steps = metadata.get('sampling_steps', 1000)
        sampling_steps_values.add(sampling_steps)
        grouped_runs[(row_val, col_val)][sd_version][sampling_steps].append(run_id)
    
    # Sort sampling steps
    sampling_steps_values = sorted(list(sampling_steps_values))
    
    # Calculate figure size - adjust for multiple bar plots per row
    n_rows = len(row_values)
    n_cols = len(col_values)
    n_sampling_steps = len(sampling_steps_values)
    w, h = 3 * n_cols, 2 * n_rows * (n_sampling_steps + 1)  # +1 for weights plot
    
    # Create figure with grid of subplots
    fig = plt.figure(figsize=(w, h))
    
    # Create subplot grid - weights plot + bar plots for each sampling step
    try:
        # Each row has 1 weights plot + n_sampling_steps bar plots
        height_ratios = []
        for _ in range(n_rows):
            height_ratios.append(2)  # weights plot
            height_ratios.extend([1] * n_sampling_steps)  # bar plots
            
        gs = plt.GridSpec(n_rows * (n_sampling_steps + 1), n_cols, 
                         height_ratios=height_ratios,
                         wspace=0.1, hspace=0.3)
    except Exception as e:
        print(f"Error creating grid spec: {e}")
        return
    
    # Create plots
    for i, row_val in enumerate(row_values):
        for j, col_val in enumerate(col_values):
            # Calculate subplot indices
            weight_idx = i * (n_sampling_steps + 1)
            bar_indices = [weight_idx + k + 1 for k in range(n_sampling_steps)]
            
            # Create subplots for this cell
            ax_weights = fig.add_subplot(gs[weight_idx, j])
            ax_bars = [fig.add_subplot(gs[idx, j]) for idx in bar_indices]
            
            # Get runs for this cell
            sd_version_runs = grouped_runs.get((row_val, col_val), {})
            
            if not sd_version_runs:
                # No data for this cell
                ax_weights.text(0.5, 0.5, 'No Data', 
                              horizontalalignment='center',
                              verticalalignment='center',
                              transform=ax_weights.transAxes)
                continue
            
            # Plot weights (same as before)
            for sd_version, sampling_steps_data in sd_version_runs.items():
                for sampling_steps, runs in sampling_steps_data.items():
                    for run_id in runs:
                        if run_id not in results_cache:
                            continue
                        
                        results = results_cache[run_id]
                        weights = results['timestep_weights']
                        weights = weights / np.abs(weights).max()
                        timesteps = np.arange(len(weights))
                        
                        color = sd_version_colors[sd_version]
                        ax_weights.plot(timesteps / len(timesteps), weights,
                                      color=color,
                                      alpha=0.8,
                                      label=f"SD {sd_version}")
            
            # Customize weights plot
            if i == 0:
                ax_weights.set_title(f'{col_key}={col_val}')
            if j == 0:
                ax_weights.set_ylabel(f'{row_key}={row_val}\nWeight')
            
            # Create bar plots for each sampling step
            for step_idx, sampling_steps in enumerate(sampling_steps_values):
                ax_bar = ax_bars[step_idx]
                accuracies = []
                
                # Collect accuracies for this sampling step
                for sd_version, sampling_steps_data in sd_version_runs.items():
                    if sampling_steps in sampling_steps_data:
                        for run_id in sampling_steps_data[sampling_steps]:
                            if run_id not in results_cache:
                                continue
                            
                            results = results_cache[run_id]
                            accuracy = results['accuracy_best']
                            accuracy_orig = results['accuracy_original']
                            
                            if 'test_accuracy_before' in results:
                                accuracy_orig = results['test_accuracy_before']
                            if 'test_accuracy' in results:
                                accuracy = results['test_accuracy']
                            
                            accuracies.append({
                                'sd_version': sd_version,
                                'accuracy': accuracy,
                                'accuracy_orig': accuracy_orig
                            })
                
                # Create bar plot for this sampling step
                if accuracies:
                    sd_versions_present = [acc['sd_version'] for acc in accuracies]
                    acc_values = [acc['accuracy'] for acc in accuracies]
                    acc_orig_values = [acc['accuracy_orig'] for acc in accuracies]
                    
                    x = np.arange(len(sd_versions_present))
                    width = 0.35
                    
                    # Plot original accuracy bars
                    ax_bar.bar(x - width/2, acc_orig_values, width, 
                             label='Original',
                             color=[sd_version_colors[v] for v in sd_versions_present],
                             alpha=0.3)
                    
                    # Plot improved accuracy bars
                    ax_bar.bar(x + width/2, acc_values, width,
                             label='Weighted',
                             color=[sd_version_colors[v] for v in sd_versions_present],
                             alpha=0.8)
                    
                    # Add accuracy values above bars
                    for idx, (orig, weighted) in enumerate(zip(acc_orig_values, acc_values)):
                        ax_bar.text(x[idx] - width/2, orig + 0.02, f'{orig*100:.0f}%', 
                                  ha='center', va='bottom', fontsize=6)
                        ax_bar.text(x[idx] + width/2, weighted + 0.02, f'{weighted*100:.0f}%', 
                                  ha='center', va='bottom', fontsize=6)
                    
                    # Customize bar plot
                    ax_bar.set_ylim(0, 1)
                    if j == 0:
                        ax_bar.set_ylabel(f'Accuracy\n(s={sampling_steps})')
                    
                    # Only add legend to first bar plot
                    if i == 0 and j == 0 and step_idx == 0:
                        ax_bar.legend(fontsize=4, frameon=False)
    
    # Create common legend for SD versions
    handles, labels = [], []
    for sd_version in sd_versions:
        color = sd_version_colors[sd_version]
        handles.append(plt.Line2D([0], [0], color=color, alpha=0.8))
        labels.append(f'SD {sd_version}')
    
    # Add legend below the subplots
    fig.legend(handles, labels, 
              loc='center', 
              bbox_to_anchor=(0.5, 0.02),
              ncol=4,
              frameon=False)
    
    # Adjust layout
    # plt.tight_layout()
    plt.subplots_adjust(bottom=0.1)
    
    # Save just the displayed data
    plot_params = {
        'row_key': row_key,
        'col_key': col_key,
        'train_ratio': train_ratio,
        'use_positive_weights': use_positive_weights,
        'l1_lambda': l1_lambda,
        'poly_degree': poly_degree
    }
    
    save_displayed_data(grouped_runs, results_cache, metadata_cache, plot_params)
    
    # Save all data in DataFrame format
    df = save_all_data(results_cache, metadata_cache, plot_params)
    
    # Save the figure
    os.makedirs('figures', exist_ok=True)
    save_path = os.path.join('figures', 
                          f'timestep_weights_grid_{row_key}_vs_{col_key}_{use_positive_weights}_l1_{l1_lambda}_train{train_ratio}_pd={poly_degree}.pdf')
    plt.savefig(save_path, dpi=300, bbox_inches='tight')
    plt.close()
    
    print(f"Saved figure to: {os.path.abspath(save_path)}")

if __name__ == "__main__":
    # Example usage for different train ratios
    train_ratios = [None,0.1, 0.2, 0.3, 0.4, 0.5, None]
    l1 = 0 # 0.0001
    use_positive_weights = True
    poly_degree = 3
    for ratio in train_ratios:
        print(f"Creating plot for train ratio: {ratio}")
        results_cache, metadata_cache = load_all_results(train_ratio=ratio,
                                                          use_positive_weights=use_positive_weights,
                                                          l1_lambda=l1, poly_degree=poly_degree)
        create_comparison_plots(results_cache, metadata_cache, 
                              row_key='sampling_steps', 
                              col_key='task',
                            #   row_key='geneval_version', 
                            #   col_key='task',
                              train_ratio=ratio,
                              use_positive_weights=use_positive_weights,
                              l1_lambda=l1,
                              poly_degree=poly_degree)
